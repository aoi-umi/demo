<%@ Template Language="C#"%>

<%@ Assembly Name="SchemaExplorer"%>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<script runat="template">

public enum DatabaseTypeEnum
{
    SqlServer,
    MySql,
}

public class DatabaseColModel
{
    public string Name;
    public string Type;
    public string NativeType;
}

public class DatabaseModel
{
    public bool IsIdInt;
    public string TableName;
    public DatabaseColModel IdCol;
    public List<DatabaseColModel> Cols;
}

public static string GetTypeWithSize(ColumnSchema col, DatabaseTypeEnum databaseType)
{
    var returnType  = col.NativeType;
    var size = col.Size;
    if(databaseType == DatabaseTypeEnum.MySql){
        size /= 3;
    }
    switch(col.DataType)
    {
        //string
        case DbType.AnsiString: 
        case DbType.AnsiStringFixedLength: 
        case DbType.String: 
        case DbType.StringFixedLength: 
            if(col.NativeType != "text" && col.NativeType != "longtext")
                returnType += "(" + size + ")";
            break;
    }
    return returnType;
}

public static string GetCSharpDataTypeByDBColumn(ColumnSchema column)
{
    switch (column.DataType)
    {
        case DbType.AnsiString: return "string";
        case DbType.AnsiStringFixedLength: return "string";
        case DbType.Binary: return "byte[]";
        case DbType.Boolean: return "bool";
        case DbType.Byte: return "byte";
        case DbType.Currency: return "decimal";
        case DbType.Date: return "DateTime";
        case DbType.DateTime: return "DateTime";
        case DbType.Decimal: return "decimal";
        case DbType.Double: return "double";
        case DbType.Guid: return "Guid";
        case DbType.Int16: return "short";
        case DbType.Int32: return "int";
        case DbType.Int64: return "long";
        case DbType.Object: return "object";
        case DbType.SByte: return "sbyte";
        case DbType.Single: return "float";
        case DbType.String: return "string";
        case DbType.StringFixedLength: return "string";
        case DbType.Time: return "TimeSpan";
        case DbType.UInt16: return "ushort";
        case DbType.UInt32: return "uint";
        case DbType.UInt64: return "ulong";
        case DbType.VarNumeric: return "decimal";
        default:
            return "__UNKNOWN__" + column.NativeType;
    }
}

public static List<string> CreateProcedure(DatabaseModel databaseModel, DatabaseTypeEnum databaseType)
{
    var procList = new List<string>();
    switch(databaseType)
    {
        case DatabaseTypeEnum.MySql:
            procList = CreateMySqlProcedure(databaseModel);
            break;
        
    }
    return procList;
}

public enum ProcTypeEnum
{
    Save,
    Del,
    DetailQuery,
    Query,
}

private static string GetRepeatStr(string str, int count)
{
    var returnStr = "";
    for(var i = 0;i < count;i++)
    {
        returnStr += str;
    }
    return returnStr;
}

private static List<string> CreateMySqlProcedure(DatabaseModel databaseModel)
{
    var procList = new List<string>();
    //var procTypeList = new List<ProcTypeEnum>(){ProcTypeEnum.Save, ProcTypeEnum.Del, ProcTypeEnum.DetailQuery, ProcTypeEnum.Query};
    var procTypeList = new List<ProcTypeEnum>(){ProcTypeEnum.Query};
    procTypeList.ForEach(procType=>{
        switch(procType){
            case ProcTypeEnum.Save:
                procList.AddRange(CreateMySqlSaveProcedure(databaseModel));
                break;
            case ProcTypeEnum.Del:
                procList.AddRange(CreateMySqlDelProcedure(databaseModel));
                break;
            case ProcTypeEnum.DetailQuery:
                procList.AddRange(CreateMySqlDetailQueryProcedure(databaseModel));
                break;
            case ProcTypeEnum.Query:
                procList.AddRange(CreateMySqlQueryProcedure(databaseModel));
                break;
        }      
    });
    return procList;
}

private static List<string> CreateMySqlSaveProcedure(DatabaseModel databaseModel)
{    
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var procName = "p_auto_" + databaseModel.TableName + "_save";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    var nullListName = paraPerfix + "null_list";
    procStrList.Add( "drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure " + procName + "(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));
    cols.ForEach(x=>{        
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", x.Name , x.NativeType));
    });
    procStrList.Add(tabStr + nullListName + " varchar(1000)");
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    
    procStrList.Add("");
    if(databaseModel.IsIdInt){
        procStrList.Add(string.Format("IF {0} IS NULL OR {0} = 0 ",  paraPerfix + databaseModel.IdCol.Name));        
    }else{        
        procStrList.Add(string.Format("IF {0} IS NULL OR length({0}) = 0 ",  paraPerfix + databaseModel.IdCol.Name));   
    }
    procStrList.Add("THEN");
    
    #region insert
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    procStrList.Add(string.Format(tabStr + "INSERT INTO {0} (", databaseModel.TableName));
    
    level = 2;
    tabStr = GetRepeatStr("\t", level);
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        procStrList.Add(string.Format(tabStr + "`{0}`{1}", x.Name, i == cols.Count - 1 ? "" : ","));
    };
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + ") VALUES( ");
    
    level = 2;
    tabStr = GetRepeatStr("\t", level);
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        procStrList.Add(string.Format(tabStr +  paraPerfix + "{0}{1}", x.Name, i == cols.Count - 1 ? "" : ","));
    };
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + ");");
    procStrList.Add(tabStr + "SELECT LAST_INSERT_ID() as '" + databaseModel.IdCol.Name + "';");    
    #endregion
    
    #region update
    procStrList.Add("ELSE");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    procStrList.Add(tabStr + "IF " + nullListName + " IS NULL THEN");  
    procStrList.Add(tabStr + "\tSET " + nullListName + " = '';"); 
    procStrList.Add(tabStr + "END IF;");       
    procStrList.Add(tabStr + "SET " + nullListName + " = CONCAT(',', " + nullListName + ", ',');" + Environment.NewLine); 
    
    procStrList.Add(tabStr + "SET @Sql ='UPDATE " + databaseModel.TableName + " SET ';");    
    
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        procStrList.Add(string.Format(tabStr + "IF " + paraPerfix + "{0} IS NOT NULL THEN", x.Name));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql,' {0} = ''', " + paraPerfix + "{0}, ''',');", x.Name));
        procStrList.Add(string.Format(tabStr + "ELSEIF LOCATE('," + x.Name +",', " + nullListName + ")>0 THEN"));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql,' {0} = null,');", x.Name));
        procStrList.Add(string.Format(tabStr + "END IF;" + Environment.NewLine));
    };    

    procStrList.Add(tabStr + "-- SELECT @Sql;");
    procStrList.Add(tabStr + "IF LOCATE(',',@Sql)>0 THEN");
    procStrList.Add(tabStr + "\tSET @Sql = LEFT(@Sql,CHAR_LENGTH(@Sql)-1);");
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql,' WHERE {0} = ''', " + paraPerfix + "{0}, ''';	');", databaseModel.IdCol.Name));
    procStrList.Add(tabStr + "\tPREPARE stmt1 FROM @Sql;");
    procStrList.Add(tabStr + "\tEXECUTE stmt1;");		
    procStrList.Add(tabStr + "END IF;");	
    procStrList.Add(string.Format(tabStr + "SELECT " + paraPerfix + "{0} AS '{0}';", databaseModel.IdCol.Name));
            
    procStrList.Add("END IF;");
    
    #endregion
    
    procStrList.Add("END;");
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;    
}

private static List<string> CreateMySqlDelProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var procName = "p_auto_" + databaseModel.TableName + "_del";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    procStrList.Add( "drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure " + procName + "(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1}", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    procStrList.Add(string.Format(tabStr + "DELETE FROM {0} WHERE `{1}` = " + paraPerfix + "{1};", databaseModel.TableName , databaseModel.IdCol.Name));
    procStrList.Add("END;");
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}

private static List<string> CreateMySqlDetailQueryProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var procName = "p_auto_" + databaseModel.TableName + "_detail_query";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    procStrList.Add( "drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure " + procName + "(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));    
    
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    
    procStrList.Add(string.Format(tabStr + "SELECT * FROM {0} WHERE `{1}` = " + paraPerfix + "{1};", databaseModel.TableName , databaseModel.IdCol.Name));
    procStrList.Add("END;");
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}

private static List<string> CreateMySqlQueryProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var procName = "p_auto_" + databaseModel.TableName + "_query";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    var nullListName = paraPerfix + "null_list";
    var pageIndexName = paraPerfix + "page_index";
    var pageSizeName = paraPerfix + "page_size";
    procStrList.Add( "/*drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure " + procName + "(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));
    var i = 0;
    cols.ForEach(x=>{        
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", x.Name , x.NativeType));
        i++;
    });
    procStrList.Add(string.Format(tabStr + "{0} {1},", nullListName, "varchar(1000)"));
    procStrList.Add(string.Format(tabStr + "{0} {1},", pageIndexName , "int"));
    procStrList.Add(string.Format(tabStr + "{0} {1}", pageSizeName , "int"));
    
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + "IF " + nullListName + " IS NULL THEN");  
    procStrList.Add(tabStr + "\tSET " + nullListName + " = '';"); 
    procStrList.Add(tabStr + "END IF;");       
    procStrList.Add(tabStr + "SET " + nullListName + " = CONCAT(',', " + nullListName + ", ',');" + Environment.NewLine); 
    procStrList.Add(string.Format(tabStr + "SET @Sql ='SELECT SQL_CALC_FOUND_ROWS * FROM {0} WHERE 1 = 1 ';", databaseModel.TableName));  
    
    procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL OR LOCATE(',{0},', {1}) > 0 THEN", paraPerfix + databaseModel.IdCol.Name, nullListName));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql, ' AND `{0}` = '''," + paraPerfix +"{0}, '''');", databaseModel.IdCol.Name));  
        procStrList.Add(tabStr + "END IF;" + Environment.NewLine);  
    
    cols.ForEach(x=>{
        procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL OR LOCATE(',{0},', {1}) > 0 THEN", paraPerfix + x.Name, nullListName));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql, ' AND `{0}` = '''," + paraPerfix +"{0}, '''');", x.Name));  
        procStrList.Add(tabStr + "END IF;" + Environment.NewLine);  
    });
    
    procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL AND {1} IS NOT NULL THEN", pageIndexName, pageSizeName));
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql, ' limit ', ({0} - 1) * {1}, ',', {1});", pageIndexName, pageSizeName));
    procStrList.Add(tabStr + "END IF;");
    procStrList.Add(tabStr + "SET @Sql = CONCAT(@Sql, ';');");
    
    procStrList.Add(tabStr + "-- SELECT @Sql;");
    procStrList.Add(tabStr + "PREPARE stmt1 FROM @Sql;");
    procStrList.Add(tabStr + "EXECUTE stmt1;");
    procStrList.Add(tabStr + "SELECT FOUND_ROWS() AS 'count';");
    
    procStrList.Add("END;*/");
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}
</script>



