<%@ Template Language="C#"%>

<%@ Assembly Name="SchemaExplorer"%>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<script runat="template">

public enum DatabaseTypeEnum
{
    MySql,
    SqlServer,
}

public enum FilenameTypeEnum
{
    Origin,
    CamelCase,
    Pascal,
}

public class DatabaseColModel
{
    public string Name;
    public string Type;
    public string NativeType;
    public bool IsString;
}

public class DatabaseModel
{
    public bool IsIdInt;
    public string TableName;
    public string RemoveTablePrefix;
    public DatabaseColModel IdCol;
    public List<DatabaseColModel> Cols;
}

public static void DeleteFilesAndFolders(string path)  
{  
    // Delete files.  
    if(!Directory.Exists(path)) return;
    string[] files = Directory.GetFiles(path);  
    foreach (var file in files)  
    {  
        File.Delete(file);  
    }  

    // Delete folders.  
    string[] folders = Directory.GetDirectories(path);  
    foreach (var folder in folders)  
    {  
        DeleteFilesAndFolders(folder);  
        Directory.Delete(folder);  
    }  
}  

public static DatabaseModel CreateDatabaseModel(TableSchema table, DatabaseTypeEnum databaseType){
    var id = "";
    var dbModel = new DatabaseModel(){
        TableName = table.Columns[0].Table.Name,
    };
    var cols = new List<DatabaseColModel>();
    foreach(ColumnSchema col in table.Columns){ 
    var colModel = new DatabaseColModel();
        colModel.Name = col.Name;
        colModel.NativeType = GetTypeWithSize(col, databaseType); 
        colModel.IsString = IsString(col.DataType);
        //第一个主键为id
        if(string.IsNullOrEmpty(id) && col.IsPrimaryKeyMember){
            dbModel.IdCol = colModel;
            var intTypeList = new List<DbType>(){DbType.Int16, DbType.Int32, DbType.Int64};
            if(intTypeList.Contains(col.DataType))
                dbModel.IsIdInt = true;
        }
        cols.Add(colModel);
        
    }
    if(dbModel.IdCol == null)
        throw new Exception("不包含主键");
    dbModel.Cols = cols;
    return dbModel;
}

public static string GetTypeWithSize(ColumnSchema col, DatabaseTypeEnum databaseType)
{
    var returnType  = col.NativeType;
    var size = col.Size;
    var sizeStr = "";
    if(databaseType == DatabaseTypeEnum.MySql){
        size /= 3;
    }
    sizeStr = size.ToString();
    if(size == -1)
        sizeStr = "max";
    if(IsString(col.DataType)){
        if(col.NativeType != "text" && col.NativeType != "longtext")
                returnType += "(" + sizeStr + ")";
    }
    return returnType;
}

public static bool IsString(DbType type){
    switch(type){
        case DbType.AnsiString: 
        case DbType.AnsiStringFixedLength: 
        case DbType.String: 
        case DbType.StringFixedLength: 
            return true;
    }
    return false;    
}

public static string GetCSharpDataTypeByDBColumn(ColumnSchema column)
{
    switch (column.DataType)
    {
        case DbType.AnsiString: return "string";
        case DbType.AnsiStringFixedLength: return "string";
        case DbType.Binary: return "byte[]";
        case DbType.Boolean: return "bool";
        case DbType.Byte: return "byte";
        case DbType.Currency: return "decimal";
        case DbType.Date: return "DateTime";
        case DbType.DateTime: return "DateTime";
        case DbType.Decimal: return "decimal";
        case DbType.Double: return "double";
        case DbType.Guid: return "Guid";
        case DbType.Int16: return "short";
        case DbType.Int32: return "int";
        case DbType.Int64: return "long";
        case DbType.Object: return "object";
        case DbType.SByte: return "sbyte";
        case DbType.Single: return "float";
        case DbType.String: return "string";
        case DbType.StringFixedLength: return "string";
        case DbType.Time: return "TimeSpan";
        case DbType.UInt16: return "ushort";
        case DbType.UInt32: return "uint";
        case DbType.UInt64: return "ulong";
        case DbType.VarNumeric: return "decimal";
        default:
            return "__UNKNOWN__" + column.NativeType;
    }
}

public enum OperateTypeEnum
{
    Save,
    Del,
    DetailQuery,
    Query,
}

private static string GetRepeatStr(string str, int count)
{
    var returnStr = "";
    for(var i = 0;i < count;i++)
    {
        returnStr += str;
    }
    return returnStr;
}

private static string Tabs(int count)
{
    return GetRepeatStr("\t", count);
}

public static string ToCamelCase(string str){
    var reg = new Regex("_([a-zA-Z])");
    str = reg.Replace(str, new MatchEvaluator((m)=>{
        var match = m as Match;
        var s = match.Groups[1].ToString();
        if(char.IsLower(s[0]))
            return char.ToUpper(s[0]) + s.Substring(1);
        return s;
    }));
    
    return char.ToLower(str[0]) + str.Substring(1);
}


public static string ToPascalCase(string str){
    var reg = new Regex("_([a-zA-Z])");
    str = reg.Replace(str, new MatchEvaluator((m)=>{
        var match = m as Match;
        var s = match.Groups[1].ToString();
        if(char.IsLower(s[0]))
            return char.ToUpper(s[0]) + s.Substring(1);
        return s;
    }));
    
    return char.ToUpper(str[0]) + str.Substring(1);
}

#region 存储过程
public static List<string> CreateProcedure(DatabaseModel databaseModel, DatabaseTypeEnum databaseType)
{
    var procList = new List<string>();
    switch(databaseType)
    {
        case DatabaseTypeEnum.MySql:
            procList = CreateMySqlProcedure(databaseModel);
            break;
        case DatabaseTypeEnum.SqlServer:
            procList = CreateSqlServerProcedure(databaseModel);
            break;
        
    }
    return procList;
}

#region mysql 存储过程

private static List<string> CreateMySqlProcedure(DatabaseModel databaseModel)
{
    var procList = new List<string>();
    var operateTypeList = new List<OperateTypeEnum>(){OperateTypeEnum.Save, OperateTypeEnum.Del, OperateTypeEnum.DetailQuery, OperateTypeEnum.Query};
    //var operateTypeList = new List<OperateTypeEnum>(){OperateTypeEnum.Query};
    operateTypeList.ForEach(operateType=>{
        switch(operateType){
            case OperateTypeEnum.Save:
                procList.AddRange(CreateMySqlSaveProcedure(databaseModel));
                break;
            case OperateTypeEnum.Del:
                procList.AddRange(CreateMySqlDelProcedure(databaseModel));
                break;
            case OperateTypeEnum.DetailQuery:
                procList.AddRange(CreateMySqlDetailQueryProcedure(databaseModel));
                break;
            case OperateTypeEnum.Query:
                procList.AddRange(CreateMySqlQueryProcedure(databaseModel));
                break;
        }      
    });
    return procList;
}

private static List<string> CreateMySqlSaveProcedure(DatabaseModel databaseModel)
{    
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_save";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    var nullListName = paraPerfix + "nullList";
    procStrList.Add( "drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure `" + procName + "`(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    cols.ForEach(x=>{        
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", x.Name , x.NativeType));
    });
    procStrList.Add(tabStr + nullListName + " varchar(1000)");
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    
    procStrList.Add("");
    if(databaseModel.IsIdInt){
        procStrList.Add(string.Format("IF {0} IS NULL OR {0} = 0 ",  paraPerfix + databaseModel.IdCol.Name));        
    }else{        
        procStrList.Add(string.Format("IF {0} IS NULL OR length({0}) = 0 ",  paraPerfix + databaseModel.IdCol.Name));   
    }
    procStrList.Add("THEN");
    
    #region insert
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    procStrList.Add(string.Format(tabStr + "INSERT INTO {0} (", tableName));
    
    level = 2;
    tabStr = GetRepeatStr("\t", level);
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        if(x.Name == databaseModel.IdCol.Name)
            continue;
        procStrList.Add(string.Format(tabStr + "`{0}`{1}", x.Name, i == cols.Count - 1 ? "" : ","));
    };
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + ") VALUES( ");
    
    level = 2;
    tabStr = GetRepeatStr("\t", level);
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        if(x.Name == databaseModel.IdCol.Name)
            continue;
        procStrList.Add(string.Format(tabStr +  paraPerfix + "{0}{1}", x.Name, i == cols.Count - 1 ? "" : ","));
    };
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + ");");
    procStrList.Add(tabStr + "SELECT LAST_INSERT_ID() as 'id';");    
    #endregion
    
    #region update
    procStrList.Add("ELSE");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    procStrList.Add(tabStr + "IF " + nullListName + " IS NULL THEN");  
    procStrList.Add(tabStr + "\tSET " + nullListName + " = '';"); 
    procStrList.Add(tabStr + "END IF;");       
    procStrList.Add(tabStr + "SET " + nullListName + " = CONCAT(',', " + nullListName + ", ',');" + Environment.NewLine); 
    
    procStrList.Add(tabStr + "SET @Sql ='UPDATE " + tableName + " SET ';");    
    
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        if(x.Name == databaseModel.IdCol.Name)
            continue;
        procStrList.Add(string.Format(tabStr + "IF " + paraPerfix + "{0} IS NOT NULL THEN", x.Name));        
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql,' `{0}` = ''', " + (x.IsString ? "replace_special_char(" + paraPerfix + "{0})" : paraPerfix + "{0}") + ", ''',');", x.Name));
        procStrList.Add(string.Format(tabStr + "ELSEIF LOCATE('," + x.Name +",', " + nullListName + ")>0 THEN"));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql,' `{0}` = NULL,');", x.Name));
        procStrList.Add(string.Format(tabStr + "END IF;" + Environment.NewLine));
    };    

    procStrList.Add(tabStr + "-- SELECT @Sql;");
    procStrList.Add(tabStr + "IF LOCATE(',',@Sql)>0 THEN");
    procStrList.Add(tabStr + "\tSET @Sql = LEFT(@Sql,CHAR_LENGTH(@Sql)-1);");
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql,' WHERE {0} = ''', " + paraPerfix + "{0}, ''';	');", databaseModel.IdCol.Name));
    procStrList.Add(tabStr + "\tPREPARE stmt1 FROM @Sql;");
    procStrList.Add(tabStr + "\tEXECUTE stmt1;");		
    procStrList.Add(tabStr + "END IF;");	
    procStrList.Add(string.Format(tabStr + "SELECT " + paraPerfix + "{0} AS 'id';", databaseModel.IdCol.Name));
            
    procStrList.Add("END IF;");
    
    #endregion
    
    procStrList.Add("END;");
    procStrList.Add("DELIMITER ;");    
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;    
}

private static List<string> CreateMySqlDelProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_del";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    procStrList.Add( "drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure `" + procName + "`(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1}", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    procStrList.Add(string.Format(tabStr + "DELETE FROM {0} WHERE `{1}` = " + paraPerfix + "{1};", tableName , databaseModel.IdCol.Name));
    procStrList.Add("END;");
    procStrList.Add("DELIMITER ;");   
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}

private static List<string> CreateMySqlDetailQueryProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_detail_query";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    procStrList.Add( "drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure `" + procName + "`(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1}", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));    
    
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    
    procStrList.Add(string.Format(tabStr + "SELECT * FROM {0} WHERE `{1}` = " + paraPerfix + "{1};", tableName , databaseModel.IdCol.Name));
    procStrList.Add("END;");
    procStrList.Add("DELIMITER ;");   
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}

private static List<string> CreateMySqlQueryProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_query";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "pr_";
    var orderByName = paraPerfix + "orderBy";
    var nullListName = paraPerfix + "nullList";
    var pageIndexName = paraPerfix + "pageIndex";
    var pageSizeName = paraPerfix + "pageSize";
    procStrList.Add( "drop procedure if exists `" + procName + "`;");
    
    procStrList.Add( "create procedure `" + procName + "`(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    var i = 0;
    cols.ForEach(x=>{        
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", x.Name , x.NativeType));
        i++;
    });
    procStrList.Add(string.Format(tabStr + "{0} {1},", orderByName, "varchar(1000)"));
    procStrList.Add(string.Format(tabStr + "{0} {1},", nullListName, "varchar(1000)"));
    procStrList.Add(string.Format(tabStr + "{0} {1},", pageIndexName , "int"));
    procStrList.Add(string.Format(tabStr + "{0} {1}", pageSizeName , "int"));
    
    procStrList.Add(")");
    procStrList.Add("SQL SECURITY INVOKER");
    procStrList.Add("BEGIN");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + "IF " + nullListName + " IS NULL THEN");  
    procStrList.Add(tabStr + "\tSET " + nullListName + " = '';"); 
    procStrList.Add(tabStr + "END IF;");       
    procStrList.Add(tabStr + "SET " + nullListName + " = CONCAT(',', " + nullListName + ", ',');" + Environment.NewLine); 
    procStrList.Add(string.Format(tabStr + "SET @Sql ='SELECT SQL_CALC_FOUND_ROWS * FROM {0} t1 WHERE 1 = 1 ';", tableName));    
    
    cols.ForEach(x=>{
        procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL AND length({0}) > 0 THEN", paraPerfix + x.Name));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql, ' AND t1.`{0}` = ''', " + (x.IsString ? "replace_special_char(" + paraPerfix + "{0})" : paraPerfix + "{0}") + ", '''');", x.Name)); 
        procStrList.Add(string.Format(tabStr + "ELSEIF LOCATE(',{0},', {1}) > 0 THEN", x.Name, nullListName));  
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql, ' AND t1.`{0}` IS NULL');", x.Name)); 
        procStrList.Add(tabStr + "END IF;" + Environment.NewLine);  
    });
    
    procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL AND length({0}) > 0 THEN", orderByName));
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql, ' ORDER BY ', replace_special_char({0}));", orderByName));
    procStrList.Add(tabStr + "END IF;");
    
    procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL AND {1} IS NOT NULL THEN", pageIndexName, pageSizeName));
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = CONCAT(@Sql, ' limit ', ({0} - 1) * {1}, ',', {1});", pageIndexName, pageSizeName));
    procStrList.Add(tabStr + "END IF;");
    procStrList.Add(tabStr + "SET @Sql = CONCAT(@Sql, ';');");
    
    procStrList.Add(tabStr + "-- SELECT @Sql;");
    procStrList.Add(tabStr + "PREPARE stmt1 FROM @Sql;");
    procStrList.Add(tabStr + "EXECUTE stmt1;");
    procStrList.Add(tabStr + "SELECT FOUND_ROWS() AS 'count';");
    
    procStrList.Add("END;");
    procStrList.Add("DELIMITER ;");   
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}
#endregion

#region sql server 存储过程

private static List<string> CreateSqlServerProcedure(DatabaseModel databaseModel)
{
    var procList = new List<string>();
    var operateTypeList = new List<OperateTypeEnum>(){OperateTypeEnum.Save, OperateTypeEnum.Del, OperateTypeEnum.DetailQuery, OperateTypeEnum.Query};
    //var operateTypeList = new List<OperateTypeEnum>(){OperateTypeEnum.Query};
    operateTypeList.ForEach(operateType=>{
        switch(operateType){
            case OperateTypeEnum.Save:
                procList.AddRange(CreateSqlServerSaveProcedure(databaseModel));
                break;
            case OperateTypeEnum.Del:
                procList.AddRange(CreateSqlServerDelProcedure(databaseModel));
                break;
            case OperateTypeEnum.DetailQuery:
                procList.AddRange(CreateSqlServerDetailQueryProcedure(databaseModel));
                break;
            case OperateTypeEnum.Query:
                procList.AddRange(CreateSqlServerQueryProcedure(databaseModel));
                break;
        }      
    });
    return procList;
}

private static List<string> CreateSqlServerSaveProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_save";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "@";
    var nullListName = paraPerfix + "nullList";
    
    procStrList.Add( "if exists(SELECT * FROM SYSOBJECTS WHERE NAME='" + procName + "')");
    procStrList.Add( "drop PROCEDURE " + procName + ";");
    procStrList.Add( "GO");
    
    procStrList.Add( "create procedure " + procName + "(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    cols.ForEach(x=>{        
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", x.Name , x.NativeType));
    });
    procStrList.Add(tabStr + nullListName + " varchar(1000)");
    procStrList.Add(")");
    procStrList.Add("AS");
    procStrList.Add("BEGIN");
    procStrList.Add("SET NOCOUNT ON;");
    
    procStrList.Add("");
    if(databaseModel.IsIdInt){
        procStrList.Add(string.Format("IF {0} IS NULL OR {0} = 0 ",  paraPerfix + databaseModel.IdCol.Name));        
    }else{        
        procStrList.Add(string.Format("IF {0} IS NULL OR Len({0}) = 0 ",  paraPerfix + databaseModel.IdCol.Name));   
    }
    procStrList.Add("BEGIN");
    
    #region insert
    level = 1;
    tabStr = GetRepeatStr("\t", level);
    procStrList.Add(string.Format(tabStr + "INSERT INTO {0} (", tableName));
    
    level = 2;
    tabStr = GetRepeatStr("\t", level);
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        if(x.Name == databaseModel.IdCol.Name)
            continue;
        procStrList.Add(string.Format(tabStr + "[{0}]{1}", x.Name, i == cols.Count - 1 ? "" : ","));
    };
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + ") VALUES( ");
    
    level = 2;
    tabStr = GetRepeatStr("\t", level);
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        if(x.Name == databaseModel.IdCol.Name)
            continue;
        procStrList.Add(string.Format(tabStr +  paraPerfix + "{0}{1}", x.Name, i == cols.Count - 1 ? "" : ","));
    };
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);    
    procStrList.Add(tabStr + ");");
    procStrList.Add(tabStr + "SELECT SCOPE_IDENTITY() as 'id';");   
    procStrList.Add(tabStr + "END");    
    #endregion
    
    #region update
    procStrList.Add("ELSE");
    procStrList.Add("BEGIN");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);
                    
    procStrList.Add(tabStr + "DECLARE @Sql NVARCHAR(Max);");  
    procStrList.Add(tabStr + "IF " + nullListName + " IS NULL BEGIN");  
    procStrList.Add(tabStr + "\tSET " + nullListName + " = '';"); 
    procStrList.Add(tabStr + "END");       
    procStrList.Add(tabStr + "SET " + nullListName + " = ',' + " + nullListName + " + ',';" + Environment.NewLine); 
    
    procStrList.Add(tabStr + "SET @Sql ='UPDATE " + tableName + " SET ';");    
    
    for(var i = 0;i < cols.Count;i++){
        var x = cols[i];
        if(x.Name == databaseModel.IdCol.Name)
            continue;
        procStrList.Add(string.Format(tabStr + "IF " + paraPerfix + "{0} IS NOT NULL BEGIN", x.Name));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = @Sql + ' {0} = ''' + dbo.replace_special_char(cast(" + paraPerfix + "{0} as varchar)) + ''',';", x.Name));
        procStrList.Add(string.Format(tabStr + "END"));
        procStrList.Add(string.Format(tabStr + "ELSE IF CHARINDEX('," + x.Name +",', " + nullListName + ")>0 BEGIN"));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = @Sql + ' {0} IS NULL,';", x.Name));
        procStrList.Add(string.Format(tabStr + "END" + Environment.NewLine));
    };    

    procStrList.Add(tabStr + "-- SELECT @Sql;");
    procStrList.Add(tabStr + "IF CHARINDEX(',',@Sql)>0 BEGIN");
    procStrList.Add(tabStr + "\tSET @Sql = substring(@Sql, 1, len(@Sql)-1);");
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = @Sql + ' WHERE {0} = ' + (select cast(" + paraPerfix + "{0} as varchar));", databaseModel.IdCol.Name));
    procStrList.Add(tabStr + "\texec (@Sql);");	
    procStrList.Add(tabStr + "END");	
    procStrList.Add(string.Format(tabStr + "SELECT " + paraPerfix + "{0} AS 'id';", databaseModel.IdCol.Name));
            
    procStrList.Add("END");
    
    #endregion
    
    procStrList.Add("END;");
    procStrList.Add("GO");
    procStrList.Add( Environment.NewLine);    
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;    
}


private static List<string> CreateSqlServerDelProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_del";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "@";
    
    procStrList.Add("if exists(SELECT * FROM SYSOBJECTS WHERE NAME='" + procName + "')");
    procStrList.Add("drop PROCEDURE " + procName + ";");
    procStrList.Add("GO");
    
    procStrList.Add("create procedure " + procName + "(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1}", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));
    procStrList.Add(")");
    procStrList.Add("AS");
    procStrList.Add("BEGIN");
    procStrList.Add("SET NOCOUNT ON;");
    procStrList.Add(string.Format(tabStr + "DELETE FROM {0} WHERE [{1}] = " + paraPerfix + "{1};", tableName , databaseModel.IdCol.Name));
    
    procStrList.Add("END;");
    procStrList.Add("GO");    
    procStrList.Add(Environment.NewLine);
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}


private static List<string> CreateSqlServerDetailQueryProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_detail_query";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "@";
    
    procStrList.Add("if exists(SELECT * FROM SYSOBJECTS WHERE NAME='" + procName + "')");
    procStrList.Add("drop PROCEDURE " + procName + ";");
    procStrList.Add("GO");
    
    procStrList.Add("create procedure " + procName + "(");
    level = 1;
    tabStr = GetRepeatStr("\t", level);
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1}", databaseModel.IdCol.Name , databaseModel.IdCol.NativeType));
    procStrList.Add(")");
    procStrList.Add("AS");
    procStrList.Add("BEGIN");
    procStrList.Add("SET NOCOUNT ON;");
    procStrList.Add(string.Format(tabStr + "SELECT * FROM {0} WHERE [{1}] = " + paraPerfix + "{1};", tableName , databaseModel.IdCol.Name));
    
    procStrList.Add("END;");
    procStrList.Add("GO");    
    procStrList.Add(Environment.NewLine);
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}


private static List<string> CreateSqlServerQueryProcedure(DatabaseModel databaseModel)
{
    var level = 0;
    var tabStr = "";
    var procList = new List<string>();
    var tableName = databaseModel.TableName;
    var procTableName = tableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    var procName = "p#auto#" 
        + procTableName
        + "_query";
    var procStrList = new List<string>();
    var cols = databaseModel.Cols;
    var paraPerfix = "@";
    var nullListName = paraPerfix + "nullList";
    var pageIndexName = paraPerfix + "pageIndex";
    var pageSizeName = paraPerfix + "pageSize";
    
    procStrList.Add("if exists(SELECT * FROM SYSOBJECTS WHERE NAME='" + procName + "')");
    procStrList.Add("drop PROCEDURE " + procName + ";");
    procStrList.Add("GO");
    
    procStrList.Add("create procedure " + procName + "(");
    level = 1;
    var i = 0;
    cols.ForEach(x=>{        
        procStrList.Add(string.Format(tabStr + paraPerfix + "{0} {1},", x.Name , x.NativeType));
        i++;
    });
    procStrList.Add(string.Format(tabStr + "{0} {1},", nullListName, "varchar(1000)"));
    procStrList.Add(string.Format(tabStr + "{0} {1},", pageIndexName , "int"));
    procStrList.Add(string.Format(tabStr + "{0} {1}", pageSizeName , "int"));
    procStrList.Add(")");
    procStrList.Add("AS");
    procStrList.Add("BEGIN");
    procStrList.Add("SET NOCOUNT ON;");
    
    level = 1;
    tabStr = GetRepeatStr("\t", level);      
    procStrList.Add(tabStr + "declare @Sql nvarchar(max);");  
    procStrList.Add(tabStr + "IF " + nullListName + " IS NULL BEGIN");  
    procStrList.Add(tabStr + "\tSET " + nullListName + " = '';"); 
    procStrList.Add(tabStr + "END;");       
    procStrList.Add(tabStr + "SET " + nullListName + " = ',' + " + nullListName + " + ',';" + Environment.NewLine); 
    procStrList.Add(string.Format(tabStr + "SET @Sql ='SELECT ROW_NUMBER() OVER (ORDER BY {0} DESC)  AS ROWNUMBER, {0} as id into #{1}_00 FROM {1} WHERE 1 = 1 ';",databaseModel.IdCol.Name, tableName));    
    
    cols.ForEach(x=>{
        procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL AND LEN({0}) > 0 BEGIN", paraPerfix + x.Name));
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = @Sql + ' AND [{0}] = ''' + dbo.replace_special_char(cast(" + paraPerfix + "{0} as varchar)) + '''';", x.Name));
        procStrList.Add(string.Format(tabStr + "END"));
        procStrList.Add(string.Format(tabStr + "ELSE IF CHARINDEX(',{0},', {1}) > 0 BEGIN", x.Name, nullListName));  
        procStrList.Add(string.Format(tabStr + "\tSET @Sql = @Sql + ' AND [{0}] IS NULL';", x.Name)); 
        procStrList.Add(tabStr + "END;" + Environment.NewLine);  
    }); 
    
    procStrList.Add(tabStr + "SET @Sql = @Sql + ';'");
        
    procStrList.Add(tabStr + "\tSET @Sql = @Sql + 'declare @count int;';"); 
    procStrList.Add(tabStr + "\tSET @Sql = @Sql + 'SET @count = @@ROWCOUNT;';");
    
    
    procStrList.Add(tabStr + "\tSET @Sql = @Sql + 'select @count as count;';"); 
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = @Sql + 'select * from {0} where {1} in (select id from #{0}_00';", tableName, databaseModel.IdCol.Name)); 
    procStrList.Add(string.Format(tabStr + "IF {0} IS NOT NULL AND {1} IS NOT NULL BEGIN", pageIndexName, pageSizeName));
    procStrList.Add(string.Format(tabStr + "\tSET @Sql = @Sql + ' where ROWNUMBER > ' + cast(({0} * {1}) as varchar) + ' and ROWNUMBER <= ' + cast((({0} + 1) * {1}) as varchar);", pageIndexName, pageSizeName));
    procStrList.Add(tabStr + "END;");
    procStrList.Add(tabStr + "SET @Sql = @Sql + ');'");
    
    procStrList.Add(tabStr + "-- SELECT @Sql;");
    procStrList.Add(tabStr + "exec (@Sql);");	
    
    procStrList.Add("END;");
    procStrList.Add("GO");    
    procStrList.Add(Environment.NewLine);
    
    procList.Add(string.Join(Environment.NewLine, procStrList.ToArray())); 
    return procList;   
}
#endregion

#endregion

#region js/ts

public static List<string> CreateScript(DatabaseModel databaseModel, DatabaseTypeEnum databaseType, int scriptType)
{
    var list = new List<string>();
    switch(databaseType)
    {
        case DatabaseTypeEnum.MySql:
            list = CreateMySqlScript(databaseModel, scriptType);
            break;
        
    }
    return list;
}

#region mysql js/ts
public static List<string> CreateMySqlScript(DatabaseModel databaseModel, int scriptType)
{
    var list = new List<string>();
    var operateTypeList = new List<OperateTypeEnum>(){OperateTypeEnum.Save, OperateTypeEnum.Del, OperateTypeEnum.DetailQuery, OperateTypeEnum.Query};
    
    var procTableName = databaseModel.TableName;
    if(!string.IsNullOrEmpty(databaseModel.RemoveTablePrefix)){
        if(procTableName.StartsWith(databaseModel.RemoveTablePrefix))
            procTableName = procTableName.Substring(databaseModel.RemoveTablePrefix.Length);
    }
    
    var scriptStrList = new List<string>();
    if(scriptType == 0)
        scriptStrList.Add("var db = require('../../_system/db');");
    else
        scriptStrList.Add("import * as db from '../../_system/db';");
    
    operateTypeList.ForEach(operateType=>{
        var level = 1;
        var tabStr = GetRepeatStr("\t", level);
        var functionName = "";
        var procName = "";
        var sqlStr = "var sql = 'call `p#auto#" + procTableName + "_{0}`({1})';";
        var paramsList = new List<string>();
        switch(operateType){
            case OperateTypeEnum.Save:
                procName = functionName = "save";
                paramsList.AddRange(databaseModel.Cols.Select(x=>x.Name));
                paramsList.Add("nullList");
                
                break;
            case OperateTypeEnum.Del:
                procName = functionName = "del";
                paramsList.Add(databaseModel.IdCol.Name);
                
                break;
            case OperateTypeEnum.DetailQuery:
                procName = "detail_query";
                functionName = "detailQuery";
                paramsList.Add(databaseModel.IdCol.Name);               
                break;
            case OperateTypeEnum.Query:
                procName = functionName = "query";
                paramsList.AddRange(databaseModel.Cols.Select(x=>x.Name));
                paramsList.Add("orderBy");
                paramsList.Add("nullList");
                paramsList.Add("pageIndex");
                paramsList.Add("pageSize");
                break;
        }      
        if(!string.IsNullOrEmpty(functionName))
        {
            sqlStr = string.Format(sqlStr, procName, string.Join(", ", paramsList.Select(x=> ":" + x)));  
            if(scriptType == 0){
                scriptStrList.Add("exports." + functionName + " = function(params, conn) {");
            }else{                
                scriptStrList.Add("export let " + functionName + " = function(params, conn) {");
            }
            scriptStrList.Add(Tabs(1) + sqlStr);
            scriptStrList.Add(Tabs(1) + "return db.query(sql, params, conn);");
            scriptStrList.Add("};" + Environment.NewLine);
        }
        
    });
    
    list.Add(string.Join(Environment.NewLine, scriptStrList.ToArray()));
    return list;
}
#endregion

#endregion
</script>



