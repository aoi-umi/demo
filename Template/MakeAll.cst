<%@ Template Language="C#"%>
<%@ Import Namespace="System.Collections.Generic" %>

<%@ Register Name="Tools" Template="Tools.cst"MergeProperties="Flase" ExcludeProperties=""%>
<%@ Register Name="Make" Template="Make.cst"MergeProperties="Flase" ExcludeProperties=""%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.TableSchemaCollection" Category="数据源"   Description="需要生成的表" %>
<%@ Property Name="MakeTypeList" Type="List<Make.MakeTypeEnum>" Category="生成类型"   Description="生成类型" %>
<%@ Property Name="TsModelNamespace" Type="String" Default="" Optional="True" Category="生成类型" Description="d.ts命名空间名字" %>
<%@ Property Name="RemoveTablePrefix" Type="String" Default="t_" DeepLoad="True" Optional="True" Category="移除数据表前缀" 
Description="移除数据表前缀"%>
<%@ Property Name="DataBaseType" Type="Make.Tools.DatabaseTypeEnum" Default="" DeepLoad="True" Optional="True" Category="数据库类型" 
Description="数据库类型"%>
<%@ Property Name="FileNameType" Type="Tools.FilenameTypeEnum" Default="" DeepLoad="True" Optional="True" Category="文件名类型" 
Description="文件名类型"%>
<%

if(SourceDatabase.Count > 0){

    Tools.DeleteFilesAndFolders("./Output/" + SourceDatabase[0].Database.Name);
    var temp = new Make();
    temp.DataBaseType = DataBaseType;

    int i = 0;                
    SourceDatabase.ForEach(x=>{    
        try{
            i++;
            var fileName = x.Name;
            var dbName = x.Database.Name;
            if(!string.IsNullOrEmpty(RemoveTablePrefix)){
                if(fileName.StartsWith(RemoveTablePrefix))
                    fileName = fileName.Substring(RemoveTablePrefix.Length);
            }
            temp.Table = x;
            temp.TsModelNamespace = TsModelNamespace;
            MakeTypeList.ForEach(makeType=>{
                try{
                    var outputFormat = "./Output/{0}/";
                    switch(makeType){
                        case Make.MakeTypeEnum.Procedure:
                            outputFormat = "sql/{1}.sql";
                            break;
                        case Make.MakeTypeEnum.Js:
                            outputFormat = "js/{1}.js";
                            break;
                        case Make.MakeTypeEnum.Ts:
                            outputFormat = "ts/{1}.ts";
                            break;
                        case Make.MakeTypeEnum.Dts:
                            outputFormat = "dts/{1}.d.ts";
                            break;
                    }
                    outputFormat = "./Output/{0}/" + outputFormat;
                    var list = new List<Make.MakeTypeEnum>(){
                        Make.MakeTypeEnum.Js,
                        Make.MakeTypeEnum.Ts,
                    };                    
                    if(list.Contains(makeType)){
                        fileName = Tools.ConvertString(fileName, FileNameType);                        
                    }else if(makeType == Make.MakeTypeEnum.Dts){                        
                        //类名用pascal
                        fileName = Tools.ConvertString(fileName, Tools.FilenameTypeEnum.Pascal);  
                    }
                    temp.MakeType = makeType;
                    temp.RenderToFile(string.Format(outputFormat, dbName, fileName), true);
                    if(makeType == Make.MakeTypeEnum.Procedure){
                        var strList = new List<string>();
                        if(i == 1){
                            switch(DataBaseType){
                                case Make.Tools.DatabaseTypeEnum.MySql:
                                    //替换特殊字符
                                    strList.Add("DROP FUNCTION IF EXISTS `replace_special_char`;");
                                    strList.Add("DELIMITER ;;");
                                    strList.Add("CREATE FUNCTION `replace_special_char`(`str` text) RETURNS text CHARSET utf8");
                                    strList.Add("BEGIN");
                                    strList.Add("    SET str = REPLACE(str, '\\\\', '\\\\\\\\');");
                                    strList.Add("    SET str = REPLACE(str, '''', '''''');");
                                    strList.Add("    RETURN str;");
                                    strList.Add("END");
                                    strList.Add(";;");
                                    strList.Add("DELIMITER ;");
                                    
                                    //替换特殊字符（like查询）
                                    strList.Add("DROP FUNCTION IF EXISTS `replace_special_char_like`;");
                                    strList.Add("DELIMITER ;;");
                                    strList.Add("CREATE FUNCTION `replace_special_char_like`(`str` text) RETURNS text CHARSET utf8");
                                    strList.Add("BEGIN");
                                    strList.Add("    SET str = replace_special_char(str);");
                                    strList.Add("    SET str = REPLACE(str, '\\\\', '\\\\\\\\');");
                                    strList.Add("    SET str = REPLACE(str, '_', '\\_');");
                                    strList.Add("    SET str = REPLACE(str, '%', '\\%');");
                                    strList.Add("    RETURN str;");
                                    strList.Add("END");
                                    strList.Add(";;");
                                    strList.Add("DELIMITER ;");
                                break;
                            case Make.Tools.DatabaseTypeEnum.SqlServer:
                                    strList.Add("if exists(SELECT * FROM SYSOBJECTS WHERE NAME='replace_special_char')");
                                    strList.Add("    drop function replace_special_char;");
                                    strList.Add("GO");

                                    strList.Add("CREATE FUNCTION  replace_special_char(@fun_str nvarchar(max))");
                                    strList.Add("RETURNS nvarchar(max)");
                                    strList.Add("AS");
                                    strList.Add("BEGIN");
                                    strList.Add("    SET @fun_str = REPLACE(@fun_str, '''', '''''');");
                                    strList.Add("    RETURN @fun_str;");
                                    strList.Add("END ");
                                    break;
                            }                        
                            var str = string.Join(Environment.NewLine, strList.ToArray()) + Environment.NewLine;
                            File.AppendAllText(string.Format("./Output/{0}/sql/_all.sql", dbName), str);
                        }
                        File.AppendAllText(string.Format("./Output/{0}/sql/_all.sql", dbName), temp.RenderToString());
                    }
            %>
    <%=string.Format("{0}:{1} {2}", x.Name, makeType, "success")%>
            <%
                }catch(Exception ex){%>
    <%=string.Format("{0}:{1}", x.Name, ex.Message)%>
        <%
                }
            });        
        }catch(Exception ex){%>
    <%=string.Format("{0}:{1}", x.Name, ex.Message)%>
        <%
        }
    });
}
%>
<script runat="template">

</script>







